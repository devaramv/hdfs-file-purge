package com.hadoop.tools.connection;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.security.UserGroupInformation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

public class HadoopConnection {
    private static final Logger logger = LoggerFactory.getLogger(HadoopConnection.class);
    private static boolean isConnectionEstablished = false;

    public static boolean isIsConnectionEstablished() {
        return isConnectionEstablished;
    }

    /*
       getConf() will set all the necessary properties of
       the hadoop environment in the configuration object
       and return

     */

    public static Configuration getConf() {

        Configuration config = new Configuration();

        config.addResource(new Path(HadoopConnectionConstants.PATH_CORE_SITE));
        config.addResource(new Path(HadoopConnectionConstants.PATH_HDFS_SITE));
        config.addResource(new Path(HadoopConnectionConstants.PATH_HIVE_SITE));
        config.addResource(new Path(HadoopConnectionConstants.PATH_MAPRED_SITE));
        config.addResource(new Path(HadoopConnectionConstants.PATH_YARN_SITE));
        config.addResource(new Path(HadoopConnectionConstants.PATH_HBASE_SITE));

        config.set("fs.hdfs.impl",
                org.apache.hadoop.hdfs.DistributedFileSystem.class.getName()
        );
        config.set("fs.file.impl",
                org.apache.hadoop.fs.LocalFileSystem.class.getName()
        );


        return config;


    }
    /*
       isKerberos(final Configuration conf) identifies if the
       cluster is kerberos authenticated or not

     */

    public static boolean isKerberos(final Configuration conf) {
        logger.info("Identifying if hadoop security authentication is using kerberos or not ");
        final String authentication = conf.get("hadoop.security.authentication");
        boolean hasKerberos = false;
        if (authentication != null && authentication.equals("kerberos")) {
            hasKerberos = true;
        }
        logger.info("TRUE: HasKerberos,FALSE: NotHasKerberos " + hasKerberos);
        return hasKerberos;
    }

    /*
       connectToHadoop(String inputKerberosPrincipal, String
       inputkerberosKeytabPath) expects kerberosPrincipal and
       kerberosKeyTabPath as arguments, establishes connection
       to hadoop then returns configuration object. If arguments
       are "null" or "" then keytab of the current user will be
       auto generated to attempt logging

     */

    public static Configuration connectToHadoop(String inputKerberosPrincipal, String inputkerberosKeytabPath) throws IOException {

        String kerberosPrincipal = "";
        String kerberosKeytabPath = "";

        logger.info("Getting Configuration Object from getConf() method");
        final Configuration conf = getConf();
        logger.info("Setting UserGroupInformation using Configuration Object " + conf);
        UserGroupInformation.setConfiguration(conf);

        final String username = System.getProperty("user.name");
        final String userHome = System.getProperty("user.home");


        if (isKerberos(conf)) {
            try {

                if (inputKerberosPrincipal != null) {
                    kerberosPrincipal = inputKerberosPrincipal;

                } else {
                    kerberosPrincipal = username + HadoopConnectionConstants.KRB_REALM;
                    logger.info("Autogenerated Kerberos Pricipal is " + kerberosPrincipal);

                }

                if (inputkerberosKeytabPath != null) {
                    kerberosKeytabPath = inputkerberosKeytabPath;

                } else {

                    kerberosKeytabPath = userHome + "/" + username + ".keytab";
                    logger.info("Autogenerated Keytab Path is " + kerberosKeytabPath);

                }

                System.setProperty("sun.security.jgss.debug", "true");
                System.setProperty("java.security.krb5.conf", HadoopConnectionConstants.PATH_KRB_CONF);

                logger.info("Logging in using " + kerberosPrincipal + " and " + kerberosKeytabPath);
                UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabPath);
                isConnectionEstablished = true;
                logger.info("Connection Established Successfully");


            } catch (IOException e) {
                logger.error("Login attempt using  " + kerberosPrincipal + " and keytab "
                        + kerberosKeytabPath + " has failed" + e);

            }
        } else {
            logger.info("login in using createRemoteUser");
            final UserGroupInformation ugi = UserGroupInformation.createRemoteUser(username);
            UserGroupInformation.setLoginUser(ugi);
            isConnectionEstablished = true;
        }

        return conf;

    }
}
